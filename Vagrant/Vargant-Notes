Vargant  -  vagrantup.com
----------

This is VM path = /D/Devops/VargantVMs

$ vagrant --help
Usage: vagrant [options] <command> [<args>]

    -h, --help                       Print this help.

Common commands:
     autocomplete    manages autocomplete installation on host
     box             manages boxes: installation, removal, etc.
     cloud           manages everything related to Vagrant Cloud
     destroy         stops and deletes all traces of the vagrant machine
     global-status   outputs status Vagrant environments for this user
     halt            stops the vagrant machine
     help            shows the help for a subcommand
     init            initializes a new Vagrant environment by creating a Vagrantfile
     login
     package         packages a running vagrant environment into a box
     plugin          manages plugins: install, uninstall, update, etc.
     port            displays information about guest port mappings
     powershell      connects to machine via powershell remoting
     provision       provisions the vagrant machine
     push            deploys code in this environment to a configured destination
     rdp             connects to machine via RDP
     reload          restarts vagrant machine, loads new Vagrantfile configuration
     resume          resume a suspended vagrant machine
     serve           start Vagrant server
     snapshot        manages snapshots: saving, restoring, etc.
     ssh             connects to machine via SSH
     ssh-config      outputs OpenSSH valid configuration to connect to the machine
     status          outputs status of the vagrant machine
     suspend         suspends the machine
     up              starts and provisions the vagrant environment
     upload          upload to machine via communicator
     validate        validates the Vagrantfile
     vbguest         plugin: vagrant-vbguest: install VirtualBox Guest Additions to the machine
     version         prints current and latest Vagrant version
     winrm           executes commands on a machine via WinRM
     winrm-config    outputs WinRM configuration to connect to the machine

For help on any individual command run `vagrant COMMAND -h`


#vagrant init - initiate the vagrant project

https://app.vagrantup.com/boxes/search - To sreach the OS boxes 

# vi Vagrantfile

Vagrant.configure("2") do |config|
config.vm.box = "centos/7"

#vagrant up   -  start the VM


# vagrant  box --help
Usage: vagrant box <subcommand> [<args>]

Available subcommands:
     add
     list
     outdated
     prune
     remove
     repackage
     update


#vagrant box list  - lists all boxes in your local repository
#vagrant box add   - Add a box to your local box repository
#vagrant box remove -  Remove the box from your local repositroy
#vagrant box outdated  - checks if any boxes in your local reposirtory are outdated	
#vagrant box update - Updates a box to new version.


How to  Provision the virtual machine

Can add the provision steps:
1. Within Vagrantfile
2. In a new file and provide location in Vagrantfile

Step 1 - Open Vagrantfile and add config.vm.provision block, add it to your Vagrantfile

Step 2 - Choose a provisioner. Vagrant supports several provisioners, including Shell, Ansible, Puppet, and Chef

config.vm.provision "shell", inline: ＜＜-SHELL
    Add your provisioning commands here
SHELL

Step 3 - Add the commands you need to setup the VM (Install, Update, Configure)
config.vm.provision "shell", inline: ＜＜-SHELL
    sudo apt-get update
    sudo apt-get install apache2 -y
SHELL

Step 4 - Save Vagrantfile and start virtual machine vagrant up or vagrant reload (to restart machine)
Vagrant will read the Vagrantfile, and run the provisioning commands specified in the config.vm.provision block
From now onwards whenever you make any changes in the provision script can run command vagrant provision
This will only update the new changes (Ensure the VM is up when running this command)

Step 5 - Access your virtual machine vagrant ssh

Adding Provision script a new file and provide location in Vagrantfile:
To use Provision Script from external file:

Step 1 - Create a new file (e.g. provision.sh) and add the scripts to provision the VM

Step 2 - Provide location of the file Vagrantfile config.vm.provision :shell, path: "provision.sh"

Step 3 - If VM is already up can run the command vagrant provision

---- https://vagrantfile-generator.vercel.app/ 

# Automatically Generated by Vagrant Config Generator, see https://github.com/jianan1104/vagrantfile-generator
Vagrant.configure('2') do |config|
  (1..1).each do |i|
  config.vm.define "Ansible-server" do |machine|
    machine.vm.box = 'centos/7'
    machine.vm.network "private_network", ip: '192.168.12.0'
    machine.vm.hostname = "Ansible-server"
    machine.vm.provider "virtualbox" do |vb|
      vb.name = "Ansible-server-#{i}"
      vb.cpus = '1'
      vb.memory = '512'
    end
  end
  end
end



Today we will learn:
How to do port forwarding in Vagrant
How to access an application running on VM from the Host machine browser

Port Forwarding
Networking allows access to the Virtual Machine from outside (like from the host system)
Vagrant by default forwards port 22 from the guest machine (VM) to an open port in the host machine
Users can also forward a specific port of your choice using vagrantfile

Step 1 - Open vagrantfile and add this line
config.vm.network "forwarded_port", guest: 80, host: 8080

Users can now access the webserver running in VM by navigating to http://localhost:8080 on your host machine

Step 2 - Add provision script to install and start Apache Server on the VM

Step 3 - Restart VM with updated Vagrantfile vagrant reload --provision

Step 4 - On the host machine open browser and goto http://localhost:8080
What if port 8080 is busy

Step 5 - Add auto-correction option auto_correct: true in Vagrantfile
By default, Vagrant will choose auto-correction port between port 2200 and port 2250 range. You can also choose your own custom range
config.vm.usable_port_range = (2200..2250)

The easiest way to use a private network is to allow the IP to be assigned via DHCP

Vagrant.configure("2") do |config|
  config.vm.network "private_network", type: "dhcp"
end

You can also specify a static IP address for the machine. This lets you access the Vagrant managed machine using a static, known IP. The Vagrantfile for a static IP looks like this:

Vagrant.configure("2") do |config|
  config.vm.network "private_network", ip: "192.168.50.4"
end


config.vm.network "public_network", ip: "192.168.0.17"

Vagrant.configure("2") do |config|
  config.vm.network "public_network",
    use_dhcp_assigned_default_route: true
end

Vagrant.configure("2") do |config|
  config.vm.network "public_network"
end
----------

# Automatically Generated by Vagrant Config Generator, see https://github.com/jianan1104/vagrantfile-generator
Vagrant.configure('2') do |config|
  (1..1).each do |i|
  config.vm.define "ansibleserver" do |machine|
    machine.vm.box = 'ubuntu/trusty64'
    machine.vm.network "private_network", ip: '192.168.56.6'
    machine.vm.hostname = "ansibleserver"
    machine.vm.provider "virtualbox" do |vb|
      vb.name = "ansibleserver"
      vb.cpus = '6'
      vb.memory = '5120'
    end
  end
  end
end

# Automatically Generated by Vagrant Config Generator, see https://github.com/jianan1104/vagrantfile-generator
Vagrant.configure('2') do |config|
  (1..1).each do |i|
  config.vm.define "client1" do |machine|
    machine.vm.box = 'ubuntu/trusty64'
    machine.vm.network "private_network", ip: '192.168.56.7'
    machine.vm.hostname = "client1"
    machine.vm.provider "virtualbox" do |vb|
      vb.name = "client1"
      vb.cpus = '2'
      vb.memory = '2048'
    end
  end
  end
end

# Automatically Generated by Vagrant Config Generator, see https://github.com/jianan1104/vagrantfile-generator
Vagrant.configure('2') do |config|
  (1..1).each do |i|
  config.vm.define "client2" do |machine|
    machine.vm.box = 'ubuntu/trusty64'
    machine.vm.network "private_network", ip: '192.168.56.8'
    machine.vm.hostname = "client2"
    machine.vm.provider "virtualbox" do |vb|
      vb.name = "client2"
      vb.cpus = '2'
      vb.memory = '2048'
    end
  end
  end
end


------

When you connect(Terminal Screen):

User: vagrant
Passwd: vagrant